// Code generated by swaggo/swag. DO NOT EDIT
package generated

import "github.com/swaggo/swag"

const docTemplateprovider = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/providers/caleta/wallet/balance": {
            "post": {
                "description": "Should return wallet balance for current player.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Caleta"
                ],
                "summary": "Balance",
                "operationId": "CaletaBalance",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/caleta.WalletbalanceJSONRequestBody"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Signature for request",
                        "name": "X-Auth-Signature",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/caleta.Walletbalance200JSONResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/caleta.Walletbalance200JSONResponse"
                        }
                    }
                }
            }
        },
        "/providers/caleta/wallet/bet": {
            "post": {
                "description": "Called when the user places a bet (debit).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Caleta"
                ],
                "summary": "Bet",
                "operationId": "CaletaBet",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/caleta.WalletbetJSONRequestBody"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Signature for request",
                        "name": "X-Auth-Signature",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/caleta.Walletbet200JSONResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/caleta.Walletbet200JSONResponse"
                        }
                    }
                }
            }
        },
        "/providers/caleta/wallet/check": {
            "post": {
                "description": "OPTIONAL - Change the initial token received for a new one that will be used on wallet transactions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Caleta"
                ],
                "summary": "Check",
                "operationId": "CaletaCheck",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/caleta.WalletcheckJSONRequestBody"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Signature for request",
                        "name": "X-Auth-Signature",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/caleta.Walletcheck200JSONResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/caleta.Walletcheck200JSONResponse"
                        }
                    }
                }
            }
        },
        "/providers/caleta/wallet/rollback": {
            "post": {
                "description": "Called when there is need to roll back the effect of the referenced transaction.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Caleta"
                ],
                "summary": "Rollback",
                "operationId": "CaletaRollback",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/caleta.WalletrollbackJSONRequestBody"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Signature for request",
                        "name": "X-Auth-Signature",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/caleta.Walletrollback200JSONResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/caleta.Walletrollback200JSONResponse"
                        }
                    }
                }
            }
        },
        "/providers/caleta/wallet/win": {
            "post": {
                "description": "Called when the user wins (credit).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Caleta"
                ],
                "summary": "Win",
                "operationId": "CaletaWin",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/caleta.TransactionwinJSONRequestBody"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Signature for request",
                        "name": "X-Auth-Signature",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/caleta.Transactionwin200JSONResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/caleta.Transactionwin200JSONResponse"
                        }
                    }
                }
            }
        },
        "/providers/evolution/balance": {
            "post": {
                "description": "Used to get userâ€™s balance.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Evolution"
                ],
                "summary": "Balance",
                "operationId": "EvoBalance",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/evolution.BalanceRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Api token",
                        "name": "authToken",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/evolution.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/evolution.StandardResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/evolution.StandardResponse"
                        }
                    }
                }
            }
        },
        "/providers/evolution/cancel": {
            "post": {
                "description": "Used to cancel userâ€™s bet.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Evolution"
                ],
                "summary": "Cancel",
                "operationId": "EvoCancel",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/evolution.CancelRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Api token",
                        "name": "authToken",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/evolution.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/evolution.StandardResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/evolution.StandardResponse"
                        }
                    }
                }
            }
        },
        "/providers/evolution/check": {
            "post": {
                "description": "Should be used for additional validation of redirected user and sid.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Evolution"
                ],
                "summary": "Check",
                "operationId": "EvoCheck",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/evolution.CheckRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Api token",
                        "name": "authToken",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/evolution.CheckResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/evolution.StandardResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/evolution.StandardResponse"
                        }
                    }
                }
            }
        },
        "/providers/evolution/credit": {
            "post": {
                "description": "Used to credit userâ€™s account (settle bets).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Evolution"
                ],
                "summary": "Credit",
                "operationId": "EvoCredit",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/evolution.CreditRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Api token",
                        "name": "authToken",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/evolution.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/evolution.StandardResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/evolution.StandardResponse"
                        }
                    }
                }
            }
        },
        "/providers/evolution/debit": {
            "post": {
                "description": "Used to debit from account (place bets).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Evolution"
                ],
                "summary": "Debit",
                "operationId": "EvoDebit",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/evolution.DebitRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Api token",
                        "name": "authToken",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/evolution.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/evolution.StandardResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/evolution.StandardResponse"
                        }
                    }
                }
            }
        },
        "/providers/evolution/promo_payout": {
            "post": {
                "description": "Used to communicate promotional payout transactions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Evolution"
                ],
                "summary": "PromoPayout",
                "operationId": "EvoPromoPayout",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/evolution.PromoPayoutRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Api token",
                        "name": "authToken",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/evolution.StandardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/evolution.StandardResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/evolution.StandardResponse"
                        }
                    }
                }
            }
        },
        "/providers/redtiger/auth": {
            "post": {
                "description": "Authenticate toward Red tiger.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Red Tiger"
                ],
                "summary": "Auth",
                "operationId": "RTAuth",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/redtiger.AuthRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "API Key",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/redtiger.AuthResponseWrapper"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/redtiger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/providers/redtiger/payout": {
            "post": {
                "description": "When a bet settles with a payout (credit).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Red Tiger"
                ],
                "summary": "Payout",
                "operationId": "RTPayout",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/redtiger.PayoutRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "API Key",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/redtiger.PayoutResponseWrapper"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/redtiger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/providers/redtiger/promo/buyin": {
            "post": {
                "description": "Promotion buyin, request the same as stake/bet.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Red Tiger"
                ],
                "summary": "PromoBuyin",
                "operationId": "RTPromoBuyin",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/redtiger.StakeRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "API Key",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/redtiger.StakeResponseWrapper"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/redtiger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/providers/redtiger/promo/refund": {
            "post": {
                "description": "Refund promotion buyin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Red Tiger"
                ],
                "summary": "PromoRefund",
                "operationId": "RTPromoRefund",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/redtiger.RefundRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "API Key",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/redtiger.RefundResponseWrapper"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/redtiger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/providers/redtiger/promo/settle": {
            "post": {
                "description": "Promotion settlement for a placed buyin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Red Tiger"
                ],
                "summary": "PromoSettle",
                "operationId": "RTPromoSettle",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/redtiger.PayoutRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "API Key",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/redtiger.PayoutResponseWrapper"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/redtiger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/providers/redtiger/refund": {
            "post": {
                "description": "Used to refund a placed bet.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Red Tiger"
                ],
                "summary": "Refund",
                "operationId": "RTRefund",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/redtiger.RefundRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "API Key",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/redtiger.RefundResponseWrapper"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/redtiger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/providers/redtiger/stake": {
            "post": {
                "description": "When a bet has been placed (debit).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Red Tiger"
                ],
                "summary": "Stake",
                "operationId": "RTStake",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/redtiger.StakeRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "API Key",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/redtiger.StakeResponseWrapper"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/redtiger.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "caleta.Currency": {
            "type": "string",
            "enum": [
                "AED",
                "AFN",
                "ALL",
                "AMD",
                "ANG",
                "AOA",
                "ARS",
                "AUD",
                "AWG",
                "AZN",
                "BAM",
                "BBD",
                "BDT",
                "BGN",
                "BHD",
                "BIF",
                "BMD",
                "BND",
                "BOB",
                "BRL",
                "BSD",
                "BTN",
                "BWP",
                "BYR",
                "BZD",
                "CAD",
                "CHF",
                "CLP",
                "CNY",
                "COP",
                "CRC",
                "CUC",
                "CUP",
                "CVE",
                "CZK",
                "DJF",
                "DKK",
                "DOP",
                "DZD",
                "EGP",
                "ERN",
                "ETB",
                "ETH",
                "EUR",
                "FJD",
                "FKP",
                "GBP",
                "GEL",
                "GHS",
                "GIP",
                "GMD",
                "GNF",
                "GTQ",
                "GYD",
                "HKD",
                "HNL",
                "HRK",
                "HTG",
                "HUF",
                "IDR",
                "ILS",
                "INR",
                "IQD",
                "IRR",
                "ISK",
                "JMD",
                "JOD",
                "JPY",
                "KES",
                "KGS",
                "KHR",
                "KMF",
                "KPW",
                "KRW",
                "KWD",
                "KYD",
                "KZT",
                "LAK",
                "LBP",
                "LKR",
                "LRD",
                "LSL",
                "LTC",
                "LTL",
                "LYD",
                "MAD",
                "mBTC",
                "MDL",
                "mETH",
                "MGA",
                "MKD",
                "mLTC",
                "MMK",
                "MNT",
                "MOP",
                "MRO",
                "MUR",
                "MVR",
                "MWK",
                "MXN",
                "MYR",
                "MZN",
                "NAD",
                "NGN",
                "NIO",
                "NOK",
                "NPR",
                "NZD",
                "OMR",
                "PAB",
                "PEN",
                "PGK",
                "PHP",
                "PKR",
                "PLN",
                "PYG",
                "QAR",
                "RON",
                "RSD",
                "RUB",
                "RWF",
                "SAR",
                "SBD",
                "SCR",
                "SDG",
                "SEK",
                "SGD",
                "SLL",
                "SOC",
                "SOS",
                "SRD",
                "SSP",
                "SYP",
                "SZL",
                "THB",
                "TJS",
                "TMT",
                "TND",
                "TOP",
                "TRY",
                "TTD",
                "TWD",
                "TZS",
                "UAH",
                "uBTC",
                "uETH",
                "UGX",
                "uLTC",
                "USD",
                "UYU",
                "UZS",
                "VEF",
                "VND",
                "VUV",
                "WST",
                "XCD",
                "XOF",
                "XPF",
                "XXX",
                "YER",
                "ZAR",
                "ZMW",
                "ZWD"
            ],
            "x-enum-varnames": [
                "AED",
                "AFN",
                "ALL",
                "AMD",
                "ANG",
                "AOA",
                "ARS",
                "AUD",
                "AWG",
                "AZN",
                "BAM",
                "BBD",
                "BDT",
                "BGN",
                "BHD",
                "BIF",
                "BMD",
                "BND",
                "BOB",
                "BRL",
                "BSD",
                "BTN",
                "BWP",
                "BYR",
                "BZD",
                "CAD",
                "CHF",
                "CLP",
                "CNY",
                "COP",
                "CRC",
                "CUC",
                "CUP",
                "CVE",
                "CZK",
                "DJF",
                "DKK",
                "DOP",
                "DZD",
                "EGP",
                "ERN",
                "ETB",
                "ETH",
                "EUR",
                "FJD",
                "FKP",
                "GBP",
                "GEL",
                "GHS",
                "GIP",
                "GMD",
                "GNF",
                "GTQ",
                "GYD",
                "HKD",
                "HNL",
                "HRK",
                "HTG",
                "HUF",
                "IDR",
                "ILS",
                "INR",
                "IQD",
                "IRR",
                "ISK",
                "JMD",
                "JOD",
                "JPY",
                "KES",
                "KGS",
                "KHR",
                "KMF",
                "KPW",
                "KRW",
                "KWD",
                "KYD",
                "KZT",
                "LAK",
                "LBP",
                "LKR",
                "LRD",
                "LSL",
                "LTC",
                "LTL",
                "LYD",
                "MAD",
                "MBTC",
                "MDL",
                "METH",
                "MGA",
                "MKD",
                "MLTC",
                "MMK",
                "MNT",
                "MOP",
                "MRO",
                "MUR",
                "MVR",
                "MWK",
                "MXN",
                "MYR",
                "MZN",
                "NAD",
                "NGN",
                "NIO",
                "NOK",
                "NPR",
                "NZD",
                "OMR",
                "PAB",
                "PEN",
                "PGK",
                "PHP",
                "PKR",
                "PLN",
                "PYG",
                "QAR",
                "RON",
                "RSD",
                "RUB",
                "RWF",
                "SAR",
                "SBD",
                "SCR",
                "SDG",
                "SEK",
                "SGD",
                "SLL",
                "SOC",
                "SOS",
                "SRD",
                "SSP",
                "SYP",
                "SZL",
                "THB",
                "TJS",
                "TMT",
                "TND",
                "TOP",
                "TRY",
                "TTD",
                "TWD",
                "TZS",
                "UAH",
                "UBTC",
                "UETH",
                "UGX",
                "ULTC",
                "USD",
                "UYU",
                "UZS",
                "VEF",
                "VND",
                "VUV",
                "WST",
                "XCD",
                "XOF",
                "XPF",
                "XXX",
                "YER",
                "ZAR",
                "ZMW",
                "ZWD"
            ]
        },
        "caleta.Status": {
            "type": "string",
            "enum": [
                "RS_ERROR_BET_LIMIT_EXCEEDED",
                "RS_ERROR_DUPLICATE_TRANSACTION",
                "RS_ERROR_INVALID_GAME",
                "RS_ERROR_INVALID_SIGNATURE",
                "RS_ERROR_INVALID_TOKEN",
                "RS_ERROR_NOT_ENOUGH_MONEY",
                "RS_ERROR_TIMEOUT",
                "RS_ERROR_TOKEN_EXPIRED",
                "RS_ERROR_TRANSACTION_DOES_NOT_EXIST",
                "RS_ERROR_TRANSACTION_ROLLED_BACK",
                "RS_ERROR_UNKNOWN",
                "RS_ERROR_USER_DISABLED",
                "RS_ERROR_WRONG_CURRENCY",
                "RS_ERROR_WRONG_SYNTAX",
                "RS_ERROR_WRONG_TYPES",
                "RS_OK"
            ],
            "x-enum-varnames": [
                "RSERRORBETLIMITEXCEEDED",
                "RSERRORDUPLICATETRANSACTION",
                "RSERRORINVALIDGAME",
                "RSERRORINVALIDSIGNATURE",
                "RSERRORINVALIDTOKEN",
                "RSERRORNOTENOUGHMONEY",
                "RSERRORTIMEOUT",
                "RSERRORTOKENEXPIRED",
                "RSERRORTRANSACTIONDOESNOTEXIST",
                "RSERRORTRANSACTIONROLLEDBACK",
                "RSERRORUNKNOWN",
                "RSERRORUSERDISABLED",
                "RSERRORWRONGCURRENCY",
                "RSERRORWRONGSYNTAX",
                "RSERRORWRONGTYPES",
                "RSOK"
            ]
        },
        "caleta.Transactionwin200JSONResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "description": "Balance We use integers to represent the amount of money. To convert real float value to integer we multiply it by 100000. Example: $3.56 must be represented as 356000",
                    "type": "integer"
                },
                "currency": {
                    "description": "Currency ISO 4217 currency code. Following enum contains all currencies supported by our system. Existing of currency in this list doesn't mean that all providers support native game play with it. Please contact us to know which provider supports which currencies.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/caleta.Currency"
                        }
                    ]
                },
                "request_uuid": {
                    "description": "RequestUuid Standard 16-byte UUID. This id can be seen as network layer action. An id of an action that is generated for each our call to Operator. Used to sync Hub88 and Operator sides for debugging purposes. Operator has to respond with the same request_uuid as the one that was received in request.",
                    "type": "string"
                },
                "status": {
                    "description": "Status Response status usage:\u003cbr/\u003eRS_OK - when transaction was processed correctly or was already processed before.\u003cbr/\u003eRS_ERROR_UNKNOWN - use this when you need a generic error code\u003cbr/\u003eRS_ERROR_TIMEOUT - when the server was disconnected by timeout\u003cbr/\u003eRS_ERROR_INVALID_TOKEN - when token never existed or is not associated to this player.\u003cbr/\u003eRS_ERROR_INVALID_GAME - when the game doesn't exist\u003cbr/\u003eRS_ERROR_WRONG_CURRENCY - when the currency is not active or does not exist\u003cbr/\u003eRS_ERROR_NOT_ENOUGH_MONEY - when user is short of money\u003cbr/\u003eRS_ERROR_USER_DISABLED when user is banned or inactive\u003cbr/\u003eRS_ERROR_INVALID_SIGNATURE - when signature doesn't match\u003cbr/\u003eRS_ERROR_TOKEN_EXPIRED - when a new token exists (this rule applies only for /wallet/bet)\u003cbr/\u003eRS_ERROR_WRONG_SYNTAX - message can't be decoded to JSON\u003cbr/\u003eRS_ERROR_WRONG_TYPES - i.e. when a type should be integer and came as string\u003cbr/\u003eRS_ERROR_DUPLICATE_TRANSACTION - when the same transaction_uuid appears but for a different user, round and game, otherwise returns RS_OK\u003cbr/\u003eRS_ERROR_TRANSACTION_DOES_NOT_EXIST - when doing a 'win' transaction and the 'bet' transaction id doesn't exist\u003cbr/\u003eRS_ERROR_TRANSACTION_ROLLED_BACK - when a 'win' transaction happens in name of a rolled back transaction (when receiving a 'rollback' replies with 'RS_OK'\u003cbr/\u003eRS_ERROR_BET_LIMIT_EXCEEDED - when the user exceeded its limits",
                    "allOf": [
                        {
                            "$ref": "#/definitions/caleta.Status"
                        }
                    ]
                },
                "user": {
                    "description": "User Unique User ID in the Operatorï¿½s system. In case of DEMO gameplay, this parameter may be omitted.",
                    "type": "string"
                }
            }
        },
        "caleta.TransactionwinJSONRequestBody": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount We use integers to represent the amount of money. To convert real float value to integer we multiply it by 100000. Example: $3.56 must be represented as 356000",
                    "type": "integer"
                },
                "bet": {
                    "description": "Bet Field for metadata related to transaction, such as type of bet, value, time, etc. Differs from game to game. Not relevant for transaction processing procedure but could be useful for statistics or activity backtracking.",
                    "type": "string"
                },
                "campaign_uuid": {
                    "description": "CampaignUuid Each Free Bet campaign contains an unique identifier on Caleta side. Campaings holds information of game where Free Bet will happen, total of spins, bet value and period of campaign.",
                    "type": "string"
                },
                "currency": {
                    "description": "Currency ISO 4217 currency code. Following enum contains all currencies supported by our system. Existing of currency in this list doesn't mean that all providers support native game play with it. Please contact us to know which provider supports which currencies.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/caleta.Currency"
                        }
                    ]
                },
                "game_code": {
                    "description": "GameCode Unique Game Code on Caleta system. Can be obtained from ` + "`" + `/api/game/list` + "`" + ` endpoint. This variable intends to replace ` + "`" + `game_id` + "`" + `.",
                    "type": "string"
                },
                "game_id": {
                    "description": "GameId Deprecated: Use ` + "`" + `game_code` + "`" + ` instead.\u003cbr/\u003eUnique game ID Caleta system. Can be obtained from ` + "`" + `/api/game/list` + "`" + ` endpoint.\u003cbr/\u003eNote: this value may change from each server (staging, production)",
                    "type": "integer"
                },
                "is_free": {
                    "description": "IsFree Flag which shows that transaction was generated by a promotional tool (FreeSpins, etc). Usually, these transactions are credited to bonus wallets (if available).",
                    "type": "boolean"
                },
                "jackpot_win": {
                    "description": "JackpotWin This field is included if a jackpot win occurred. The reported value indicate how much of the win amount was contributed to from winning the jackpot. This value is represented as an integer similar to amount.",
                    "type": "integer"
                },
                "reference_transaction_uuid": {
                    "description": "ReferenceTransactionUuid Unique identifier of the transaction that this transaction is referencing. In case of rollback, this field will contain transaction_uuid of the transaction which needs to be rolled back. In case of win, there will be transaction_uuid of the bet to which this win is related.",
                    "type": "string"
                },
                "request_uuid": {
                    "description": "RequestUuid Standard 16-byte UUID. This id can be seen as network layer action. An id of an action that is generated for each our call to Operator. Used to sync Hub88 and Operator sides for debugging purposes. Operator has to respond with the same request_uuid as the one that was received in request.",
                    "type": "string"
                },
                "reward_uuid": {
                    "description": "RewardUuid This holds the uuid of a reward given to a player on Caleta side. Rewards holds information about which campaigns belong, player, quantity left of Free Bets.",
                    "type": "string"
                },
                "round": {
                    "description": "Round Game round id. Used to relate all bets and wins in one round. All transactions related to the same round will have the same value in this field. It's unique through whole system.",
                    "type": "string"
                },
                "round_closed": {
                    "description": "RoundClosed Denotes when the round is closed",
                    "type": "boolean"
                },
                "supplier_user": {
                    "description": "SupplierUser The name of the user in Provider's system (in case Operator needs to find user in Provder's back office or report problem with the user). If value is NULL, the Operator can search for their own user_id.",
                    "type": "string"
                },
                "token": {
                    "description": "Token Operator's back end generates a token associated with the User, game, his or her current currency and maybe other parameters depending on the Operator's preferences. The token acts as an ID parameter for the game session. It is important that the currency is not changed during the current game session. If the User changes the currency or display unit, the Operator's backend needs to generate a new token and re-open the game with new token. In case of DEMO gameplay, this parameter may be omitted.\u003cbr/\u003eA token should be valid for all bet transactions until a new one is generated, expired tokens should continue be valid for Win/Rollback transactions if is related to a previous existing bet.",
                    "type": "string"
                },
                "transaction_uuid": {
                    "description": "TransactionUuid Unique wallet transaction.",
                    "type": "string"
                }
            }
        },
        "caleta.Walletbalance200JSONResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "description": "Balance We use integers to represent the amount of money. To convert real float value to integer we multiply it by 100000. Example: $3.56 must be represented as 356000",
                    "type": "integer"
                },
                "currency": {
                    "description": "Currency ISO 4217 currency code. Following enum contains all currencies supported by our system. Existing of currency in this list doesn't mean that all providers support native game play with it. Please contact us to know which provider supports which currencies.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/caleta.Currency"
                        }
                    ]
                },
                "request_uuid": {
                    "description": "RequestUuid Standard 16-byte UUID. This id can be seen as network layer action. An id of an action that is generated for each our call to Operator. Used to sync Hub88 and Operator sides for debugging purposes. Operator has to respond with the same request_uuid as the one that was received in request.",
                    "type": "string"
                },
                "status": {
                    "description": "Status Response status usage:\u003cbr/\u003eRS_OK - when transaction was processed correctly or was already processed before.\u003cbr/\u003eRS_ERROR_UNKNOWN - use this when you need a generic error code\u003cbr/\u003eRS_ERROR_TIMEOUT - when the server was disconnected by timeout\u003cbr/\u003eRS_ERROR_INVALID_TOKEN - when token never existed or is not associated to this player.\u003cbr/\u003eRS_ERROR_INVALID_GAME - when the game doesn't exist\u003cbr/\u003eRS_ERROR_WRONG_CURRENCY - when the currency is not active or does not exist\u003cbr/\u003eRS_ERROR_NOT_ENOUGH_MONEY - when user is short of money\u003cbr/\u003eRS_ERROR_USER_DISABLED when user is banned or inactive\u003cbr/\u003eRS_ERROR_INVALID_SIGNATURE - when signature doesn't match\u003cbr/\u003eRS_ERROR_TOKEN_EXPIRED - when a new token exists (this rule applies only for /wallet/bet)\u003cbr/\u003eRS_ERROR_WRONG_SYNTAX - message can't be decoded to JSON\u003cbr/\u003eRS_ERROR_WRONG_TYPES - i.e. when a type should be integer and came as string\u003cbr/\u003eRS_ERROR_DUPLICATE_TRANSACTION - when the same transaction_uuid appears but for a different user, round and game, otherwise returns RS_OK\u003cbr/\u003eRS_ERROR_TRANSACTION_DOES_NOT_EXIST - when doing a 'win' transaction and the 'bet' transaction id doesn't exist\u003cbr/\u003eRS_ERROR_TRANSACTION_ROLLED_BACK - when a 'win' transaction happens in name of a rolled back transaction (when receiving a 'rollback' replies with 'RS_OK'\u003cbr/\u003eRS_ERROR_BET_LIMIT_EXCEEDED - when the user exceeded its limits",
                    "allOf": [
                        {
                            "$ref": "#/definitions/caleta.Status"
                        }
                    ]
                },
                "user": {
                    "description": "User Unique User ID in the Operatorï¿½s system. In case of DEMO gameplay, this parameter may be omitted.",
                    "type": "string"
                }
            }
        },
        "caleta.WalletbalanceJSONRequestBody": {
            "type": "object",
            "properties": {
                "game_code": {
                    "description": "GameCode Unique Game Code on Caleta system. Can be obtained from ` + "`" + `/api/game/list` + "`" + ` endpoint. This variable intends to replace ` + "`" + `game_id` + "`" + `.",
                    "type": "string"
                },
                "game_id": {
                    "description": "GameId Deprecated: Use ` + "`" + `game_code` + "`" + ` instead.\u003cbr/\u003eUnique game ID Caleta system. Can be obtained from ` + "`" + `/api/game/list` + "`" + ` endpoint.\u003cbr/\u003eNote: this value may change from each server (staging, production)",
                    "type": "integer"
                },
                "request_uuid": {
                    "description": "RequestUuid Standard 16-byte UUID. This id can be seen as network layer action. An id of an action that is generated for each our call to Operator. Used to sync Hub88 and Operator sides for debugging purposes. Operator has to respond with the same request_uuid as the one that was received in request.",
                    "type": "string"
                },
                "supplier_user": {
                    "description": "SupplierUser The name of the user in Provider's system (in case Operator needs to find user in Provder's back office or report problem with the user). If value is NULL, the Operator can search for their own user_id.",
                    "type": "string"
                },
                "token": {
                    "description": "Token Operator's back end generates a token associated with the User, game, his or her current currency and maybe other parameters depending on the Operator's preferences. The token acts as an ID parameter for the game session. It is important that the currency is not changed during the current game session. If the User changes the currency or display unit, the Operator's backend needs to generate a new token and re-open the game with new token. In case of DEMO gameplay, this parameter may be omitted.\u003cbr/\u003eA token should be valid for all bet transactions until a new one is generated, expired tokens should continue be valid for Win/Rollback transactions if is related to a previous existing bet.",
                    "type": "string"
                }
            }
        },
        "caleta.Walletbet200JSONResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "description": "Balance We use integers to represent the amount of money. To convert real float value to integer we multiply it by 100000. Example: $3.56 must be represented as 356000",
                    "type": "integer"
                },
                "currency": {
                    "description": "Currency ISO 4217 currency code. Following enum contains all currencies supported by our system. Existing of currency in this list doesn't mean that all providers support native game play with it. Please contact us to know which provider supports which currencies.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/caleta.Currency"
                        }
                    ]
                },
                "request_uuid": {
                    "description": "RequestUuid Standard 16-byte UUID. This id can be seen as network layer action. An id of an action that is generated for each our call to Operator. Used to sync Hub88 and Operator sides for debugging purposes. Operator has to respond with the same request_uuid as the one that was received in request.",
                    "type": "string"
                },
                "status": {
                    "description": "Status Response status usage:\u003cbr/\u003eRS_OK - when transaction was processed correctly or was already processed before.\u003cbr/\u003eRS_ERROR_UNKNOWN - use this when you need a generic error code\u003cbr/\u003eRS_ERROR_TIMEOUT - when the server was disconnected by timeout\u003cbr/\u003eRS_ERROR_INVALID_TOKEN - when token never existed or is not associated to this player.\u003cbr/\u003eRS_ERROR_INVALID_GAME - when the game doesn't exist\u003cbr/\u003eRS_ERROR_WRONG_CURRENCY - when the currency is not active or does not exist\u003cbr/\u003eRS_ERROR_NOT_ENOUGH_MONEY - when user is short of money\u003cbr/\u003eRS_ERROR_USER_DISABLED when user is banned or inactive\u003cbr/\u003eRS_ERROR_INVALID_SIGNATURE - when signature doesn't match\u003cbr/\u003eRS_ERROR_TOKEN_EXPIRED - when a new token exists (this rule applies only for /wallet/bet)\u003cbr/\u003eRS_ERROR_WRONG_SYNTAX - message can't be decoded to JSON\u003cbr/\u003eRS_ERROR_WRONG_TYPES - i.e. when a type should be integer and came as string\u003cbr/\u003eRS_ERROR_DUPLICATE_TRANSACTION - when the same transaction_uuid appears but for a different user, round and game, otherwise returns RS_OK\u003cbr/\u003eRS_ERROR_TRANSACTION_DOES_NOT_EXIST - when doing a 'win' transaction and the 'bet' transaction id doesn't exist\u003cbr/\u003eRS_ERROR_TRANSACTION_ROLLED_BACK - when a 'win' transaction happens in name of a rolled back transaction (when receiving a 'rollback' replies with 'RS_OK'\u003cbr/\u003eRS_ERROR_BET_LIMIT_EXCEEDED - when the user exceeded its limits",
                    "allOf": [
                        {
                            "$ref": "#/definitions/caleta.Status"
                        }
                    ]
                },
                "user": {
                    "description": "User Unique User ID in the Operatorï¿½s system. In case of DEMO gameplay, this parameter may be omitted.",
                    "type": "string"
                }
            }
        },
        "caleta.WalletbetJSONRequestBody": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount We use integers to represent the amount of money. To convert real float value to integer we multiply it by 100000. Example: $3.56 must be represented as 356000",
                    "type": "integer"
                },
                "bet": {
                    "description": "Bet Field for metadata related to transaction, such as type of bet, value, time, etc. Differs from game to game. Not relevant for transaction processing procedure but could be useful for statistics or activity backtracking.",
                    "type": "string"
                },
                "campaign_uuid": {
                    "description": "CampaignUuid Each Free Bet campaign contains an unique identifier on Caleta side. Campaings holds information of game where Free Bet will happen, total of spins, bet value and period of campaign.",
                    "type": "string"
                },
                "currency": {
                    "description": "Currency ISO 4217 currency code. Following enum contains all currencies supported by our system. Existing of currency in this list doesn't mean that all providers support native game play with it. Please contact us to know which provider supports which currencies.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/caleta.Currency"
                        }
                    ]
                },
                "game_code": {
                    "description": "GameCode Unique Game Code on Caleta system. Can be obtained from ` + "`" + `/api/game/list` + "`" + ` endpoint. This variable intends to replace ` + "`" + `game_id` + "`" + `.",
                    "type": "string"
                },
                "game_id": {
                    "description": "GameId Deprecated: Use ` + "`" + `game_code` + "`" + ` instead.\u003cbr/\u003eUnique game ID Caleta system. Can be obtained from ` + "`" + `/api/game/list` + "`" + ` endpoint.\u003cbr/\u003eNote: this value may change from each server (staging, production)",
                    "type": "integer"
                },
                "is_free": {
                    "description": "IsFree Flag which shows that transaction was generated by a promotional tool (FreeSpins, etc). Usually, these transactions are credited to bonus wallets (if available).",
                    "type": "boolean"
                },
                "request_uuid": {
                    "description": "RequestUuid Standard 16-byte UUID. This id can be seen as network layer action. An id of an action that is generated for each our call to Operator. Used to sync Hub88 and Operator sides for debugging purposes. Operator has to respond with the same request_uuid as the one that was received in request.",
                    "type": "string"
                },
                "reward_uuid": {
                    "description": "RewardUuid This holds the uuid of a reward given to a player on Caleta side. Rewards holds information about which campaigns belong, player, quantity left of Free Bets.",
                    "type": "string"
                },
                "round": {
                    "description": "Round Game round id. Used to relate all bets and wins in one round. All transactions related to the same round will have the same value in this field. It's unique through whole system.",
                    "type": "string"
                },
                "round_closed": {
                    "description": "RoundClosed Denotes when the round is closed",
                    "type": "boolean"
                },
                "supplier_user": {
                    "description": "SupplierUser The name of the user in Provider's system (in case Operator needs to find user in Provder's back office or report problem with the user). If value is NULL, the Operator can search for their own user_id.",
                    "type": "string"
                },
                "token": {
                    "description": "Token Operator's back end generates a token associated with the User, game, his or her current currency and maybe other parameters depending on the Operator's preferences. The token acts as an ID parameter for the game session. It is important that the currency is not changed during the current game session. If the User changes the currency or display unit, the Operator's backend needs to generate a new token and re-open the game with new token. In case of DEMO gameplay, this parameter may be omitted.\u003cbr/\u003eA token should be valid for all bet transactions until a new one is generated, expired tokens should continue be valid for Win/Rollback transactions if is related to a previous existing bet.",
                    "type": "string"
                },
                "transaction_uuid": {
                    "description": "TransactionUuid Unique wallet transaction.",
                    "type": "string"
                }
            }
        },
        "caleta.Walletcheck200JSONResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "Token Operator's back end generates a token associated with the User, game, his or her current currency and maybe other parameters depending on the Operator's preferences. The token acts as an ID parameter for the game session. It is important that the currency is not changed during the current game session. If the User changes the currency or display unit, the Operator's backend needs to generate a new token and re-open the game with new token. In case of DEMO gameplay, this parameter may be omitted.\u003cbr/\u003eA token should be valid for all bet transactions until a new one is generated, expired tokens should continue be valid for Win/Rollback transactions if is related to a previous existing bet.",
                    "type": "string"
                }
            }
        },
        "caleta.WalletcheckJSONRequestBody": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "Token Operator's back end generates a token associated with the User, game, his or her current currency and maybe other parameters depending on the Operator's preferences. The token acts as an ID parameter for the game session. It is important that the currency is not changed during the current game session. If the User changes the currency or display unit, the Operator's backend needs to generate a new token and re-open the game with new token. In case of DEMO gameplay, this parameter may be omitted.\u003cbr/\u003eA token should be valid for all bet transactions until a new one is generated, expired tokens should continue be valid for Win/Rollback transactions if is related to a previous existing bet.",
                    "type": "string"
                }
            }
        },
        "caleta.Walletrollback200JSONResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "description": "Balance We use integers to represent the amount of money. To convert real float value to integer we multiply it by 100000. Example: $3.56 must be represented as 356000",
                    "type": "integer"
                },
                "currency": {
                    "description": "Currency ISO 4217 currency code. Following enum contains all currencies supported by our system. Existing of currency in this list doesn't mean that all providers support native game play with it. Please contact us to know which provider supports which currencies.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/caleta.Currency"
                        }
                    ]
                },
                "request_uuid": {
                    "description": "RequestUuid Standard 16-byte UUID. This id can be seen as network layer action. An id of an action that is generated for each our call to Operator. Used to sync Hub88 and Operator sides for debugging purposes. Operator has to respond with the same request_uuid as the one that was received in request.",
                    "type": "string"
                },
                "status": {
                    "description": "Status Response status usage:\u003cbr/\u003eRS_OK - when transaction was processed correctly or was already processed before.\u003cbr/\u003eRS_ERROR_UNKNOWN - use this when you need a generic error code\u003cbr/\u003eRS_ERROR_TIMEOUT - when the server was disconnected by timeout\u003cbr/\u003eRS_ERROR_INVALID_TOKEN - when token never existed or is not associated to this player.\u003cbr/\u003eRS_ERROR_INVALID_GAME - when the game doesn't exist\u003cbr/\u003eRS_ERROR_WRONG_CURRENCY - when the currency is not active or does not exist\u003cbr/\u003eRS_ERROR_NOT_ENOUGH_MONEY - when user is short of money\u003cbr/\u003eRS_ERROR_USER_DISABLED when user is banned or inactive\u003cbr/\u003eRS_ERROR_INVALID_SIGNATURE - when signature doesn't match\u003cbr/\u003eRS_ERROR_TOKEN_EXPIRED - when a new token exists (this rule applies only for /wallet/bet)\u003cbr/\u003eRS_ERROR_WRONG_SYNTAX - message can't be decoded to JSON\u003cbr/\u003eRS_ERROR_WRONG_TYPES - i.e. when a type should be integer and came as string\u003cbr/\u003eRS_ERROR_DUPLICATE_TRANSACTION - when the same transaction_uuid appears but for a different user, round and game, otherwise returns RS_OK\u003cbr/\u003eRS_ERROR_TRANSACTION_DOES_NOT_EXIST - when doing a 'win' transaction and the 'bet' transaction id doesn't exist\u003cbr/\u003eRS_ERROR_TRANSACTION_ROLLED_BACK - when a 'win' transaction happens in name of a rolled back transaction (when receiving a 'rollback' replies with 'RS_OK'\u003cbr/\u003eRS_ERROR_BET_LIMIT_EXCEEDED - when the user exceeded its limits",
                    "allOf": [
                        {
                            "$ref": "#/definitions/caleta.Status"
                        }
                    ]
                },
                "user": {
                    "description": "User Unique User ID in the Operatorï¿½s system. In case of DEMO gameplay, this parameter may be omitted.",
                    "type": "string"
                }
            }
        },
        "caleta.WalletrollbackJSONRequestBody": {
            "type": "object",
            "properties": {
                "game_code": {
                    "description": "GameCode Unique Game Code on Caleta system. Can be obtained from ` + "`" + `/api/game/list` + "`" + ` endpoint. This variable intends to replace ` + "`" + `game_id` + "`" + `.",
                    "type": "string"
                },
                "game_id": {
                    "description": "GameId Deprecated: Use ` + "`" + `game_code` + "`" + ` instead.\u003cbr/\u003eUnique game ID Caleta system. Can be obtained from ` + "`" + `/api/game/list` + "`" + ` endpoint.\u003cbr/\u003eNote: this value may change from each server (staging, production)",
                    "type": "integer"
                },
                "is_free": {
                    "description": "IsFree Flag which shows that transaction was generated by a promotional tool (FreeSpins, etc). Usually, these transactions are credited to bonus wallets (if available).",
                    "type": "boolean"
                },
                "reference_transaction_uuid": {
                    "description": "ReferenceTransactionUuid Unique identifier of the transaction that this transaction is referencing. In case of rollback, this field will contain transaction_uuid of the transaction which needs to be rolled back. In case of win, there will be transaction_uuid of the bet to which this win is related.",
                    "type": "string"
                },
                "request_uuid": {
                    "description": "RequestUuid Standard 16-byte UUID. This id can be seen as network layer action. An id of an action that is generated for each our call to Operator. Used to sync Hub88 and Operator sides for debugging purposes. Operator has to respond with the same request_uuid as the one that was received in request.",
                    "type": "string"
                },
                "round": {
                    "description": "Round Game round id. Used to relate all bets and wins in one round. All transactions related to the same round will have the same value in this field. It's unique through whole system.",
                    "type": "string"
                },
                "round_closed": {
                    "description": "RoundClosed Denotes when the round is closed",
                    "type": "boolean"
                },
                "token": {
                    "description": "Token Operator's back end generates a token associated with the User, game, his or her current currency and maybe other parameters depending on the Operator's preferences. The token acts as an ID parameter for the game session. It is important that the currency is not changed during the current game session. If the User changes the currency or display unit, the Operator's backend needs to generate a new token and re-open the game with new token. In case of DEMO gameplay, this parameter may be omitted.\u003cbr/\u003eA token should be valid for all bet transactions until a new one is generated, expired tokens should continue be valid for Win/Rollback transactions if is related to a previous existing bet.",
                    "type": "string"
                },
                "transaction_uuid": {
                    "description": "TransactionUuid Unique wallet transaction.",
                    "type": "string"
                },
                "user": {
                    "description": "User Unique User ID in the Operatorï¿½s system. In case of DEMO gameplay, this parameter may be omitted.",
                    "type": "string"
                }
            }
        },
        "evolution.BalanceRequest": {
            "type": "object",
            "required": [
                "currency",
                "sid",
                "userId"
            ],
            "properties": {
                "currency": {
                    "type": "string"
                },
                "game": {},
                "sid": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "evolution.CancelRequest": {
            "type": "object",
            "required": [
                "currency",
                "game",
                "sid",
                "userId"
            ],
            "properties": {
                "currency": {
                    "type": "string"
                },
                "game": {
                    "$ref": "#/definitions/evolution.Game"
                },
                "sid": {
                    "type": "string"
                },
                "transaction": {
                    "$ref": "#/definitions/evolution.Transaction"
                },
                "userId": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "evolution.CheckRequest": {
            "type": "object",
            "required": [
                "sid",
                "userId"
            ],
            "properties": {
                "channel": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string"
                        }
                    }
                },
                "sid": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "evolution.CheckResponse": {
            "type": "object",
            "properties": {
                "sid": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "evolution.CreditRequest": {
            "type": "object",
            "required": [
                "currency",
                "game",
                "sid",
                "transaction",
                "userId"
            ],
            "properties": {
                "currency": {
                    "type": "string"
                },
                "game": {
                    "$ref": "#/definitions/evolution.Game"
                },
                "sid": {
                    "type": "string"
                },
                "transaction": {
                    "$ref": "#/definitions/evolution.Transaction"
                },
                "userId": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "evolution.DebitRequest": {
            "type": "object",
            "required": [
                "currency",
                "game",
                "sid",
                "transaction",
                "userId"
            ],
            "properties": {
                "currency": {
                    "type": "string"
                },
                "game": {
                    "$ref": "#/definitions/evolution.Game"
                },
                "sid": {
                    "type": "string"
                },
                "transaction": {
                    "$ref": "#/definitions/evolution.Transaction"
                },
                "userId": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "evolution.Game": {
            "type": "object",
            "properties": {
                "details": {
                    "$ref": "#/definitions/evolution.GameDetails"
                },
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "evolution.GameDetails": {
            "type": "object",
            "properties": {
                "table": {
                    "$ref": "#/definitions/evolution.GameTable"
                }
            }
        },
        "evolution.GameTable": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "vid": {
                    "type": "string"
                }
            }
        },
        "evolution.PromoPayoutRequest": {
            "type": "object",
            "required": [
                "currency",
                "game",
                "sid",
                "userId"
            ],
            "properties": {
                "currency": {
                    "type": "string"
                },
                "game": {
                    "$ref": "#/definitions/evolution.Game"
                },
                "promoTransaction": {
                    "$ref": "#/definitions/evolution.PromoTransaction"
                },
                "sid": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "evolution.PromoTransaction": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "remainingRounds": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "voucherId": {
                    "type": "string"
                }
            }
        },
        "evolution.StandardResponse": {
            "type": "object",
            "required": [
                "balance",
                "status"
            ],
            "properties": {
                "balance": {
                    "type": "number"
                },
                "bonus": {
                    "type": "number"
                },
                "retransmission": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "evolution.Transaction": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "refId": {
                    "type": "string"
                }
            }
        },
        "redtiger.AuthRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "affiliate": {
                    "type": "string",
                    "maxLength": 255
                },
                "casino": {
                    "type": "string",
                    "maxLength": 50
                },
                "channel": {
                    "type": "string",
                    "maxLength": 8
                },
                "currency": {
                    "type": "string",
                    "maxLength": 8
                },
                "extras": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "token": {
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 32
                },
                "userId": {
                    "type": "string",
                    "maxLength": 36
                }
            }
        },
        "redtiger.AuthResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "$ref": "#/definitions/redtiger.Balance"
                },
                "casino": {
                    "type": "string",
                    "maxLength": 50
                },
                "country": {
                    "type": "string"
                },
                "currency": {
                    "type": "string",
                    "maxLength": 8
                },
                "language": {
                    "type": "string",
                    "maxLength": 6
                },
                "token": {
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 32
                },
                "userId": {
                    "type": "string",
                    "maxLength": 32
                }
            }
        },
        "redtiger.AuthResponseWrapper": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/redtiger.Error"
                },
                "result": {
                    "$ref": "#/definitions/redtiger.AuthResponse"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "redtiger.Balance": {
            "type": "object",
            "properties": {
                "bonus": {
                    "type": "number"
                },
                "cash": {
                    "type": "number"
                }
            }
        },
        "redtiger.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "$ref": "#/definitions/redtiger.RTErrorCode"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "redtiger.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/redtiger.Error"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "redtiger.Game": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "maxLength": 128
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string",
                    "maxLength": 128
                }
            }
        },
        "redtiger.Jackpot": {
            "type": "object",
            "properties": {
                "contribution": {
                    "type": "string"
                },
                "group": {
                    "type": "string",
                    "maxLength": 100
                },
                "pots": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "redtiger.PayoutDetails": {
            "type": "object",
            "properties": {
                "game": {
                    "type": "number"
                },
                "jackpot": {
                    "type": "number"
                }
            }
        },
        "redtiger.PayoutRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "casino": {
                    "type": "string",
                    "maxLength": 50
                },
                "currency": {
                    "type": "string",
                    "maxLength": 8
                },
                "game": {
                    "$ref": "#/definitions/redtiger.Game"
                },
                "ip": {
                    "type": "string"
                },
                "jackpot": {
                    "$ref": "#/definitions/redtiger.Jackpot"
                },
                "promo": {
                    "$ref": "#/definitions/redtiger.Promo"
                },
                "retry": {
                    "type": "boolean"
                },
                "round": {
                    "$ref": "#/definitions/redtiger.Round"
                },
                "token": {
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 32
                },
                "transaction": {
                    "$ref": "#/definitions/redtiger.TransactionPayout"
                },
                "userId": {
                    "type": "string",
                    "maxLength": 36
                }
            }
        },
        "redtiger.PayoutResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "$ref": "#/definitions/redtiger.Balance"
                },
                "currency": {
                    "type": "string",
                    "maxLength": 8
                },
                "id": {
                    "type": "string"
                },
                "payout": {
                    "$ref": "#/definitions/redtiger.Balance"
                },
                "token": {
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 32
                }
            }
        },
        "redtiger.PayoutResponseWrapper": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/redtiger.Error"
                },
                "result": {
                    "$ref": "#/definitions/redtiger.PayoutResponse"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "redtiger.Promo": {
            "type": "object",
            "properties": {
                "campaignCode": {
                    "type": "string",
                    "maxLength": 64
                },
                "campaignId": {
                    "type": "integer"
                },
                "instanceCode": {
                    "type": "string",
                    "maxLength": 64
                },
                "instanceId": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "redtiger.RTErrorCode": {
            "type": "integer",
            "enum": [
                100,
                200,
                201,
                301,
                302,
                303,
                304,
                305,
                306,
                400,
                401,
                500,
                501
            ],
            "x-enum-varnames": [
                "APIAuthError",
                "InvalidInput",
                "GenericError",
                "NotAuthorized",
                "UserNotFound",
                "BannedUser",
                "InsufficientFunds",
                "InvalidUserCurrency",
                "UserLimitedPlaying",
                "TransactionNotFound",
                "DuplicateTransaction",
                "InternalServerError",
                "UnderMaintenanceMode"
            ]
        },
        "redtiger.RefundRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "casino": {
                    "type": "string",
                    "maxLength": 50
                },
                "currency": {
                    "type": "string",
                    "maxLength": 8
                },
                "game": {
                    "$ref": "#/definitions/redtiger.Game"
                },
                "ip": {
                    "type": "string"
                },
                "promo": {
                    "$ref": "#/definitions/redtiger.Promo"
                },
                "round": {
                    "$ref": "#/definitions/redtiger.Round"
                },
                "token": {
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 32
                },
                "transaction": {
                    "$ref": "#/definitions/redtiger.TransactionStake"
                },
                "userId": {
                    "type": "string",
                    "maxLength": 36
                }
            }
        },
        "redtiger.RefundResponseWrapper": {
            "type": "object",
            "properties": {
                "balance": {
                    "$ref": "#/definitions/redtiger.Balance"
                },
                "currency": {
                    "type": "string"
                },
                "error": {
                    "$ref": "#/definitions/redtiger.Error"
                },
                "result": {
                    "$ref": "#/definitions/redtiger.RefundResult"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "redtiger.RefundResult": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "stake": {
                    "$ref": "#/definitions/redtiger.Balance"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "redtiger.Round": {
            "type": "object",
            "properties": {
                "ends": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string",
                    "maxLength": 32
                },
                "starts": {
                    "type": "boolean"
                }
            }
        },
        "redtiger.Sources": {
            "type": "object",
            "properties": {
                "features": {
                    "type": "number"
                },
                "jackpot": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "lines": {
                    "type": "number"
                }
            }
        },
        "redtiger.StakeDetails": {
            "type": "object",
            "properties": {
                "game": {
                    "type": "number"
                },
                "jackpot": {
                    "type": "number"
                }
            }
        },
        "redtiger.StakeRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "casino": {
                    "type": "string",
                    "maxLength": 50
                },
                "currency": {
                    "type": "string",
                    "maxLength": 8
                },
                "game": {
                    "$ref": "#/definitions/redtiger.Game"
                },
                "ip": {
                    "type": "string"
                },
                "promo": {
                    "$ref": "#/definitions/redtiger.Promo"
                },
                "round": {
                    "$ref": "#/definitions/redtiger.Round"
                },
                "token": {
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 32
                },
                "transaction": {
                    "$ref": "#/definitions/redtiger.TransactionStake"
                },
                "userId": {
                    "type": "string",
                    "maxLength": 36
                }
            }
        },
        "redtiger.StakeResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "$ref": "#/definitions/redtiger.Balance"
                },
                "currency": {
                    "type": "string",
                    "maxLength": 8
                },
                "id": {
                    "type": "string"
                },
                "stake": {
                    "$ref": "#/definitions/redtiger.Balance"
                },
                "token": {
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 32
                }
            }
        },
        "redtiger.StakeResponseWrapper": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/redtiger.Error"
                },
                "result": {
                    "$ref": "#/definitions/redtiger.StakeResponse"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "redtiger.TransactionPayout": {
            "type": "object",
            "properties": {
                "details": {
                    "$ref": "#/definitions/redtiger.PayoutDetails"
                },
                "id": {
                    "type": "string",
                    "maxLength": 32
                },
                "payout": {
                    "type": "number",
                    "minimum": 0
                },
                "payoutPromo": {
                    "type": "number",
                    "minimum": 0
                },
                "sources": {
                    "$ref": "#/definitions/redtiger.Sources"
                }
            }
        },
        "redtiger.TransactionStake": {
            "type": "object",
            "properties": {
                "details": {
                    "$ref": "#/definitions/redtiger.StakeDetails"
                },
                "id": {
                    "type": "string",
                    "maxLength": 32
                },
                "stake": {
                    "type": "number"
                },
                "stakePromo": {
                    "type": "number"
                }
            }
        }
    }
}`

// SwaggerInfoprovider holds exported Swagger Info so clients can modify it
var SwaggerInfoprovider = &swag.Spec{
	Version:          "-",
	Host:             "localhost:8083",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Valkyrie Provider API",
	Description:      "The exposed endpoints by the enabled game provider modules.",
	InfoInstanceName: "provider",
	SwaggerTemplate:  docTemplateprovider,
}

func init() {
	swag.Register(SwaggerInfoprovider.InstanceName(), SwaggerInfoprovider)
}
