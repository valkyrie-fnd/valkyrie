// Package caleta provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/four-fingers/oapi-codegen version v0.0.0-20221219135408-9237c9743c67 DO NOT EDIT.
package caleta

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/four-fingers/oapi-codegen/pkg/runtime"
	"github.com/gofiber/fiber/v2"
	"github.com/valkyrie-fnd/valkyrie/provider"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /wallet/balance)
	Walletbalance(c *fiber.Ctx, params WalletbalanceParams) error

	// (POST /wallet/bet)
	Walletbet(c *fiber.Ctx, params WalletbetParams) error

	// (POST /wallet/check)
	Walletcheck(c *fiber.Ctx, params WalletcheckParams) error

	// (POST /wallet/rollback)
	Walletrollback(c *fiber.Ctx, params WalletrollbackParams) error

	// (POST /wallet/win)
	Transactionwin(c *fiber.Ctx, params TransactionwinParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// Walletbalance operation middleware
func (siw *ServerInterfaceWrapper) Walletbalance(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WalletbalanceParams

	headers := c.GetReqHeaders()

	// ------------- Required header parameter "X-Auth-Signature" -------------
	if value, found := headers[http.CanonicalHeaderKey("X-Auth-Signature")]; found {
		var XAuthSignature string

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Auth-Signature", runtime.ParamLocationHeader, value, &XAuthSignature)
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter X-Auth-Signature: %w", err).Error())
		}

		params.XAuthSignature = XAuthSignature

	} else {
		err = fmt.Errorf("Header parameter X-Auth-Signature is required, but not found: %w", err)
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}

	return siw.Handler.Walletbalance(c, params)
}

// Walletbet operation middleware
func (siw *ServerInterfaceWrapper) Walletbet(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WalletbetParams

	headers := c.GetReqHeaders()

	// ------------- Required header parameter "X-Auth-Signature" -------------
	if value, found := headers[http.CanonicalHeaderKey("X-Auth-Signature")]; found {
		var XAuthSignature string

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Auth-Signature", runtime.ParamLocationHeader, value, &XAuthSignature)
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter X-Auth-Signature: %w", err).Error())
		}

		params.XAuthSignature = XAuthSignature

	} else {
		err = fmt.Errorf("Header parameter X-Auth-Signature is required, but not found: %w", err)
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}

	// ------------- Optional header parameter "X-Msg-Timestamp" -------------
	if value, found := headers[http.CanonicalHeaderKey("X-Msg-Timestamp")]; found {
		var XMsgTimestamp time.Time

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Msg-Timestamp", runtime.ParamLocationHeader, value, &XMsgTimestamp)
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter X-Msg-Timestamp: %w", err).Error())
		}

		params.XMsgTimestamp = &XMsgTimestamp

	}

	return siw.Handler.Walletbet(c, params)
}

// Walletcheck operation middleware
func (siw *ServerInterfaceWrapper) Walletcheck(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WalletcheckParams

	headers := c.GetReqHeaders()

	// ------------- Required header parameter "X-Auth-Signature" -------------
	if value, found := headers[http.CanonicalHeaderKey("X-Auth-Signature")]; found {
		var XAuthSignature string

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Auth-Signature", runtime.ParamLocationHeader, value, &XAuthSignature)
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter X-Auth-Signature: %w", err).Error())
		}

		params.XAuthSignature = XAuthSignature

	} else {
		err = fmt.Errorf("Header parameter X-Auth-Signature is required, but not found: %w", err)
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}

	return siw.Handler.Walletcheck(c, params)
}

// Walletrollback operation middleware
func (siw *ServerInterfaceWrapper) Walletrollback(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WalletrollbackParams

	headers := c.GetReqHeaders()

	// ------------- Required header parameter "X-Auth-Signature" -------------
	if value, found := headers[http.CanonicalHeaderKey("X-Auth-Signature")]; found {
		var XAuthSignature string

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Auth-Signature", runtime.ParamLocationHeader, value, &XAuthSignature)
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter X-Auth-Signature: %w", err).Error())
		}

		params.XAuthSignature = XAuthSignature

	} else {
		err = fmt.Errorf("Header parameter X-Auth-Signature is required, but not found: %w", err)
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}

	// ------------- Optional header parameter "X-Msg-Timestamp" -------------
	if value, found := headers[http.CanonicalHeaderKey("X-Msg-Timestamp")]; found {
		var XMsgTimestamp time.Time

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Msg-Timestamp", runtime.ParamLocationHeader, value, &XMsgTimestamp)
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter X-Msg-Timestamp: %w", err).Error())
		}

		params.XMsgTimestamp = &XMsgTimestamp

	}

	return siw.Handler.Walletrollback(c, params)
}

// Transactionwin operation middleware
func (siw *ServerInterfaceWrapper) Transactionwin(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TransactionwinParams

	headers := c.GetReqHeaders()

	// ------------- Required header parameter "X-Auth-Signature" -------------
	if value, found := headers[http.CanonicalHeaderKey("X-Auth-Signature")]; found {
		var XAuthSignature string

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Auth-Signature", runtime.ParamLocationHeader, value, &XAuthSignature)
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter X-Auth-Signature: %w", err).Error())
		}

		params.XAuthSignature = XAuthSignature

	} else {
		err = fmt.Errorf("Header parameter X-Auth-Signature is required, but not found: %w", err)
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}

	// ------------- Optional header parameter "X-Msg-Timestamp" -------------
	if value, found := headers[http.CanonicalHeaderKey("X-Msg-Timestamp")]; found {
		var XMsgTimestamp time.Time

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Msg-Timestamp", runtime.ParamLocationHeader, value, &XMsgTimestamp)
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter X-Msg-Timestamp: %w", err).Error())
		}

		params.XMsgTimestamp = &XMsgTimestamp

	}

	return siw.Handler.Transactionwin(c, params)
}

func Routes(wrapper ServerInterfaceWrapper) []provider.Route {
	return []provider.Route{

		{
			Path:        "/wallet/balance",
			Method:      "POST",
			HandlerFunc: wrapper.Walletbalance,
		},

		{
			Path:        "/wallet/bet",
			Method:      "POST",
			HandlerFunc: wrapper.Walletbet,
		},

		{
			Path:        "/wallet/check",
			Method:      "POST",
			HandlerFunc: wrapper.Walletcheck,
		},

		{
			Path:        "/wallet/rollback",
			Method:      "POST",
			HandlerFunc: wrapper.Walletrollback,
		},

		{
			Path:        "/wallet/win",
			Method:      "POST",
			HandlerFunc: wrapper.Transactionwin,
		},
	}
}

type WalletbalanceRequestObject struct {
	Params WalletbalanceParams
	Body   *WalletbalanceJSONRequestBody
}

type WalletbalanceResponseObject interface {
	VisitWalletbalanceResponse(ctx *fiber.Ctx) error
}

type Walletbalance200JSONResponse BalanceResponse

func (response Walletbalance200JSONResponse) VisitWalletbalanceResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type WalletbetRequestObject struct {
	Params WalletbetParams
	Body   *WalletbetJSONRequestBody
}

type WalletbetResponseObject interface {
	VisitWalletbetResponse(ctx *fiber.Ctx) error
}

type Walletbet200JSONResponse BalanceResponse

func (response Walletbet200JSONResponse) VisitWalletbetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type WalletcheckRequestObject struct {
	Params WalletcheckParams
	Body   *WalletcheckJSONRequestBody
}

type WalletcheckResponseObject interface {
	VisitWalletcheckResponse(ctx *fiber.Ctx) error
}

type Walletcheck200JSONResponse InlineResponse2001

func (response Walletcheck200JSONResponse) VisitWalletcheckResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type WalletrollbackRequestObject struct {
	Params WalletrollbackParams
	Body   *WalletrollbackJSONRequestBody
}

type WalletrollbackResponseObject interface {
	VisitWalletrollbackResponse(ctx *fiber.Ctx) error
}

type Walletrollback200JSONResponse BalanceResponse

func (response Walletrollback200JSONResponse) VisitWalletrollbackResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type TransactionwinRequestObject struct {
	Params TransactionwinParams
	Body   *TransactionwinJSONRequestBody
}

type TransactionwinResponseObject interface {
	VisitTransactionwinResponse(ctx *fiber.Ctx) error
}

type Transactionwin200JSONResponse BalanceResponse

func (response Transactionwin200JSONResponse) VisitTransactionwinResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /wallet/balance)
	Walletbalance(ctx context.Context, request WalletbalanceRequestObject) (WalletbalanceResponseObject, error)

	// (POST /wallet/bet)
	Walletbet(ctx context.Context, request WalletbetRequestObject) (WalletbetResponseObject, error)

	// (POST /wallet/check)
	Walletcheck(ctx context.Context, request WalletcheckRequestObject) (WalletcheckResponseObject, error)

	// (POST /wallet/rollback)
	Walletrollback(ctx context.Context, request WalletrollbackRequestObject) (WalletrollbackResponseObject, error)

	// (POST /wallet/win)
	Transactionwin(ctx context.Context, request TransactionwinRequestObject) (TransactionwinResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Walletbalance operation middleware
func (sh *strictHandler) Walletbalance(ctx *fiber.Ctx, params WalletbalanceParams) error {
	var request WalletbalanceRequestObject

	request.Params = params

	var body WalletbalanceJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Walletbalance(ctx.UserContext(), request.(WalletbalanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Walletbalance")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(WalletbalanceResponseObject); ok {
		if err := validResponse.VisitWalletbalanceResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Walletbet operation middleware
func (sh *strictHandler) Walletbet(ctx *fiber.Ctx, params WalletbetParams) error {
	var request WalletbetRequestObject

	request.Params = params

	var body WalletbetJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Walletbet(ctx.UserContext(), request.(WalletbetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Walletbet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(WalletbetResponseObject); ok {
		if err := validResponse.VisitWalletbetResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Walletcheck operation middleware
func (sh *strictHandler) Walletcheck(ctx *fiber.Ctx, params WalletcheckParams) error {
	var request WalletcheckRequestObject

	request.Params = params

	var body WalletcheckJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Walletcheck(ctx.UserContext(), request.(WalletcheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Walletcheck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(WalletcheckResponseObject); ok {
		if err := validResponse.VisitWalletcheckResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Walletrollback operation middleware
func (sh *strictHandler) Walletrollback(ctx *fiber.Ctx, params WalletrollbackParams) error {
	var request WalletrollbackRequestObject

	request.Params = params

	var body WalletrollbackJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Walletrollback(ctx.UserContext(), request.(WalletrollbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Walletrollback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(WalletrollbackResponseObject); ok {
		if err := validResponse.VisitWalletrollbackResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Transactionwin operation middleware
func (sh *strictHandler) Transactionwin(ctx *fiber.Ctx, params TransactionwinParams) error {
	var request TransactionwinRequestObject

	request.Params = params

	var body TransactionwinJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Transactionwin(ctx.UserContext(), request.(TransactionwinRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Transactionwin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(TransactionwinResponseObject); ok {
		if err := validResponse.VisitTransactionwinResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}
